
// =================================================================
// Advanced Analytics Bot - v134.1 (Robust Coin Info) + PnL Alerts + Cooldown
// =================================================================

const express = require("express");
const { Bot, Keyboard, InlineKeyboard, webhookCallback } = require("grammy");
const fetch = require("node-fetch");
const crypto = require("crypto");
require("dotenv").config();
const { connectDB, getDB } = require("./database.js");

// --- Bot Setup ---
const app = express();
const bot = new Bot(process.env.TELEGRAM_BOT_TOKEN);
const PORT = process.env.PORT || 3000;
const AUTHORIZED_USER_ID = parseInt(process.env.AUTORIZED_USER_ID || process.env.AUTHORIZED_USER_ID);

// --- State Variables ---
let waitingState = null;

// =================================================================
// SECTION 0: OKX API ADAPTER
// =================================================================

class OKXAdapter {
  constructor() {
    this.name = "OKX";
    this.baseURL = "https://www.okx.com";
  }

  getHeaders(method, path, body = "") {
    const timestamp = new Date().toISOString();
    const prehash =
      timestamp +
      method.toUpperCase() +
      path +
      (typeof body === "object" ? JSON.stringify(body) : body);
    const sign = crypto
      .createHmac("sha256", process.env.OKX_API_SECRET_KEY)
      .update(prehash)
      .digest("base64");
    return {
      "OK-ACCESS-KEY": process.env.OKX_API_KEY,
      "OK-ACCESS-SIGN": sign,
      "OK-ACCESS-TIMESTAMP": timestamp,
      "OK-ACCESS-PASSPHRASE": process.env.OKX_API_PASSPHRASE,
      "Content-Type": "application/json",
    };
  }

  async getMarketPrices() {
    try {
      const tickersRes = await fetch(
        `${this.baseURL}/api/v5/market/tickers?instType=SPOT`
      );
      const tickersJson = await tickersRes.json();
      if (tickersJson.code !== "0") {
        return { error: `ŸÅÿ¥ŸÑ ÿ¨ŸÑÿ® ÿ£ÿ≥ÿπÿßÿ± ÿßŸÑÿ≥ŸàŸÇ: ${tickersJson.msg}` };
      }
      const prices = {};
      tickersJson.data.forEach((t) => {
        if (t.instId.endsWith("-USDT")) {
          const lastPrice = parseFloat(t.last);
          const openPrice = parseFloat(t.open24h);
          let change24h = 0;
          if (openPrice > 0) change24h = (lastPrice - openPrice) / openPrice;
          prices[t.instId] = {
            price: lastPrice,
            open24h: openPrice,
            change24h,
            volCcy24h: parseFloat(t.volCcy24h),
          };
        }
      });
      return prices;
    } catch (error) {
      return { error: "ÿÆÿ∑ÿ£ ÿßÿ≥ÿ™ÿ´ŸÜÿßÿ¶Ÿä ÿπŸÜÿØ ÿ¨ŸÑÿ® ÿ£ÿ≥ÿπÿßÿ± ÿßŸÑÿ≥ŸàŸÇ." };
    }
  }

  async getPortfolio(prices) {
    try {
      const path = "/api/v5/account/balance";
      const res = await fetch(`${this.baseURL}${path}`, {
        headers: this.getHeaders("GET", path),
      });
      const json = await res.json();
      if (
        json.code !== "0" ||
        !json.data ||
        !json.data[0] ||
        !json.data[0].details
      ) {
        return {
          error: `ŸÅÿ¥ŸÑ ÿ¨ŸÑÿ® ÿßŸÑŸÖÿ≠ŸÅÿ∏ÿ©: ${json.msg || "ÿ®ŸäÿßŸÜÿßÿ™ ÿ∫Ÿäÿ± ŸÖÿ™ŸàŸÇÿπÿ©"}`,
        };
      }
      let assets = [],
        total = 0,
        usdtValue = 0;
      json.data[0].details.forEach((asset) => {
        const amount = parseFloat(asset.eq);
        if (amount > 0) {
          const instId = `${asset.ccy}-USDT`;
          const priceData =
            prices[instId] || {
              price: asset.ccy === "USDT" ? 1 : 0,
              change24h: 0,
            };
          const value = amount * priceData.price;
          total += value;
          if (asset.ccy === "USDT") usdtValue = value;
          if (value >= 1)
            assets.push({
              asset: asset.ccy,
              price: priceData.price,
              value,
              amount,
              change24h: priceData.change24h,
            });
        }
      });
      assets.sort((a, b) => b.value - a.value);
      return { assets, total, usdtValue };
    } catch (e) {
      return { error: "ÿÆÿ∑ÿ£ ŸÅŸä ÿßŸÑÿßÿ™ÿµÿßŸÑ ÿ®ŸÖŸÜÿµÿ© OKX." };
    }
  }

  async getBalanceForComparison() {
    try {
      const path = "/api/v5/account/balance";
      const res = await fetch(`${this.baseURL}${path}`, {
        headers: this.getHeaders("GET", path),
      });
      const json = await res.json();
      if (
        json.code !== "0" ||
        !json.data ||
        !json.data[0] ||
        !json.data[0].details
      ) {
        return null;
      }
      const balances = {};
      json.data[0].details.forEach((asset) => {
        const amount = parseFloat(asset.eq);
        if (amount > 0) balances[asset.ccy] = amount;
      });
      return balances;
    } catch (e) {
      return null;
    }
  }
}

const okxAdapter = new OKXAdapter();

// =================================================================
// SECTION 1: DATABASE AND HELPER FUNCTIONS
// =================================================================

const getCollection = (collectionName) => getDB().collection(collectionName);

async function getConfig(id, defaultValue = {}) {
  try {
    const doc = await getCollection("configs").findOne({ _id: id });
    return doc ? doc.data : defaultValue;
  } catch (e) {
    return defaultValue;
  }
}

async function saveConfig(id, data) {
  try {
    await getCollection("configs").updateOne(
      { _id: id },
      { $set: { data: data } },
      { upsert: true }
    );
  } catch (e) {
    console.error(`Error in saveConfig for id: ${id}`, e);
  }
}

async function saveClosedTrade(tradeData) {
  try {
    await getCollection("tradeHistory").insertOne({
      ...tradeData,
      closedAt: new Date(),
    });
  } catch (e) {
    console.error("Error in saveClosedTrade:", e);
  }
}

async function getHistoricalPerformance(asset) {
  try {
    const history = await getCollection("tradeHistory")
      .find({ asset: asset })
      .toArray();
    if (history.length === 0) {
      return {
        realizedPnl: 0,
        tradeCount: 0,
        winningTrades: 0,
        losingTrades: 0,
        avgDuration: 0,
      };
    }
    const realizedPnl = history.reduce((sum, trade) => sum + trade.pnl, 0);
    const winningTrades = history.filter((trade) => trade.pnl > 0).length;
    const losingTrades = history.filter((trade) => trade.pnl <= 0).length;
    const totalDuration = history.reduce(
      (sum, trade) => sum + trade.durationDays,
      0
    );
    const avgDuration = history.length > 0 ? totalDuration / history.length : 0;
    return {
      realizedPnl,
      tradeCount: history.length,
      winningTrades,
      losingTrades,
      avgDuration,
    };
  } catch (e) {
    return null;
  }
}

async function saveVirtualTrade(tradeData) {
  try {
    const tradeWithId = {
      ...tradeData,
      _id: new crypto.randomBytes(16).toString("hex"),
    };
    await getCollection("virtualTrades").insertOne(tradeWithId);
    return tradeWithId;
  } catch (e) {
    console.error("Error saving virtual trade:", e);
  }
}

async function getActiveVirtualTrades() {
  try {
    return await getCollection("virtualTrades").find({ status: "active" }).toArray();
  } catch (e) {
    return [];
  }
}

async function updateVirtualTradeStatus(tradeId, status, finalPrice) {
  try {
    await getCollection("virtualTrades").updateOne(
      { _id: tradeId },
      {
        $set: {
          status: status,
          closePrice: finalPrice,
          closedAt: new Date(),
        },
      }
    );
  } catch (e) {
    console.error(`Error updating virtual trade ${tradeId}:`, e);
  }
}

const loadCapital = async () => (await getConfig("capital", { value: 0 })).value;
const saveCapital = (amount) => saveConfig("capital", { value: amount });

const loadSettings = async () =>
  await getConfig("settings", {
    dailySummary: true,
    autoPostToChannel: false,
    debugMode: false,
    dailyReportTime: "22:00",
  });

const saveSettings = (settings) => saveConfig("settings", settings);

const loadPositions = async () => await getConfig("positions", {});
const savePositions = (positions) => saveConfig("positions", positions);

const loadHistory = async () => await getConfig("dailyHistory", []);
const saveHistory = (history) => saveConfig("dailyHistory", history);

const loadHourlyHistory = async () => await getConfig("hourlyHistory", []);
const saveHourlyHistory = (history) => saveConfig("hourlyHistory", history);

const loadBalanceState = async () => await getConfig("balanceState", {});
const saveBalanceState = (state) => saveConfig("balanceState", state);

const loadAlerts = async () => await getConfig("priceAlerts", []);
const saveAlerts = (alerts) => saveConfig("priceAlerts", alerts);

// ÿ™ŸÜÿ®ŸäŸáÿßÿ™ ÿßŸÑÿ≠ÿ±ŸÉÿ©: ÿ•ÿ∂ÿßŸÅÿ© ÿ≠ŸÇŸàŸÑ ÿ¨ÿØŸäÿØÿ© ÿßŸÅÿ™ÿ±ÿßÿ∂ŸäŸãÿß
const loadAlertSettings = async () =>
  await getConfig("alertSettings", {
    global: 5,
    overrides: {},
    cooldownMinutes: 15, // ŸÖŸáŸÑÿ© ÿßŸÅÿ™ÿ±ÿßÿ∂Ÿäÿ©
    minAssetValueForAlerts: 50, // ÿ≠ÿØ ÿ£ÿØŸÜŸâ ŸÑŸÇŸäŸÖÿ© ÿßŸÑÿ£ÿµŸÑ ŸÑÿ•ÿ±ÿ≥ÿßŸÑ ÿßŸÑÿ™ŸÜÿ®ŸäŸá
  });

const saveAlertSettings = (settings) => saveConfig("alertSettings", settings);

const loadPriceTracker = async () =>
  await getConfig("priceTracker", { totalPortfolioValue: 0, assets: {} });
const savePriceTracker = (tracker) => saveConfig("priceTracker", tracker);

function formatNumber(num, decimals = 2) {
  const number = parseFloat(num);
  if (isNaN(number) || !isFinite(number)) return (0).toFixed(decimals);
  return number.toFixed(decimals);
}

// ÿ£ÿØŸàÿßÿ™ ŸÖÿ≥ÿßÿπÿØÿ© ŸÑŸÑŸàŸÇÿ™ ŸàÿßŸÑÿ™ŸÜÿ≥ŸäŸÇ
const minutesDiff = (fromTs, toTs) => (toTs - fromTs) / (1000 * 60);
function cairoTimeString(date = new Date()) {
  return date.toLocaleString("ar-EG", { timeZone: "Africa/Cairo" });
}

async function sendDebugMessage(message) {
  const settings = await loadSettings();
  if (settings.debugMode) {
    try {
      await bot.api.sendMessage(
        AUTHORIZED_USER_ID,
        `üêû *Debug (OKX):* ${message}`,
        { parse_mode: "Markdown" }
      );
    } catch (e) {
      console.error("Failed to send debug message:", e);
    }
  }
}

// =================================================================
// SECTION 2: DATA PROCESSING FUNCTIONS
// =================================================================

async function getInstrumentDetails(instId) {
  try {
    const tickerRes = await fetch(
      `${okxAdapter.baseURL}/api/v5/market/ticker?instId=${instId.toUpperCase()}`
    );
    const tickerJson = await tickerRes.json();
    if (tickerJson.code !== "0" || !tickerJson.data[0]) {
      return { error: `ŸÑŸÖ Ÿäÿ™ŸÖ ÿßŸÑÿπÿ´Ÿàÿ± ÿπŸÑŸâ ÿßŸÑÿπŸÖŸÑÿ©.` };
    }
    const tickerData = tickerJson.data[0];
    return {
      price: parseFloat(tickerData.last),
      high24h: parseFloat(tickerData.high24h),
      low24h: parseFloat(tickerData.low24h),
      vol24h: parseFloat(tickerData.volCcy24h),
    };
  } catch {
    throw new Error("ÿÆÿ∑ÿ£ ŸÅŸä ÿßŸÑÿßÿ™ÿµÿßŸÑ ÿ®ÿßŸÑŸÖŸÜÿµÿ© ŸÑÿ¨ŸÑÿ® ÿ®ŸäÿßŸÜÿßÿ™ ÿßŸÑÿ≥ŸàŸÇ.");
  }
}

async function getHistoricalCandles(instId, bar = "1D", limit = 100) {
  let allCandles = [];
  let before = "";
  const maxLimitPerRequest = 100;
  try {
    while (allCandles.length < limit) {
      const currentLimit = Math.min(maxLimitPerRequest, limit - allCandles.length);
      const url = `${okxAdapter.baseURL}/api/v5/market/history-candles?instId=${instId}&bar=${bar}&limit=${currentLimit}${before}`;
      const res = await fetch(url);
      const json = await res.json();
      if (json.code !== "0" || !json.data || json.data.length === 0) break;

      const newCandles = json.data.map((c) => ({
        time: parseInt(c[0]),
        high: parseFloat(c[2]),
        low: parseFloat(c[3]),
        close: parseFloat(c[4]),
      }));
      allCandles.push(...newCandles);
      if (newCandles.length < maxLimitPerRequest) break;
      const lastTimestamp = newCandles[newCandles.length - 1].time;
      before = `&before=${lastTimestamp}`;
    }
    return allCandles.reverse();
  } catch (e) {
    console.error(`Error fetching historical candles for ${instId}:`, e);
    return [];
  }
}

async function getAssetPriceExtremes(instId) {
  try {
    const [yearlyCandles, allTimeCandles] = await Promise.all([
      getHistoricalCandles(instId, "1D", 365),
      getHistoricalCandles(instId, "1M", 240),
    ]);
    if (yearlyCandles.length === 0) return null;

    const getHighLow = (candles) => {
      if (!candles || candles.length === 0)
        return { high: 0, low: Infinity };
      return candles.reduce(
        (acc, candle) => ({
          high: Math.max(acc.high, candle.high),
          low: Math.min(acc.low, candle.low),
        }),
        { high: 0, low: Infinity }
      );
    };

    const weeklyCandles = yearlyCandles.slice(-7);
    const monthlyCandles = yearlyCandles.slice(-30);

    const formatLow = (low) => (low === Infinity ? 0 : low);

    const weeklyExtremes = getHighLow(weeklyCandles);
    const monthlyExtremes = getHighLow(monthlyCandles);
    const yearlyExtremes = getHighLow(yearlyCandles);
    const allTimeExtremes = getHighLow(allTimeCandles);

    return {
      weekly: { high: weeklyExtremes.high, low: formatLow(weeklyExtremes.low) },
      monthly: { high: monthlyExtremes.high, low: formatLow(monthlyExtremes.low) },
      yearly: { high: yearlyExtremes.high, low: formatLow(yearlyExtremes.low) },
      allTime: { high: allTimeExtremes.high, low: formatLow(allTimeExtremes.low) },
    };
  } catch (error) {
    console.error(`Error in getAssetPriceExtremes for ${instId}:`, error);
    return null;
  }
}

function calculateSMA(closes, period) {
  if (closes.length < period) return null;
  const sum = closes.slice(-period).reduce((acc, val) => acc + val, 0);
  return sum / period;
}

function calculateRSI(closes, period = 14) {
  if (closes.length < period + 1) return null;
  let gains = 0,
    losses = 0;
  for (let i = 1; i <= period; i++) {
    const diff = closes[i] - closes[i - 1];
    diff > 0 ? (gains += diff) : (losses -= diff);
  }
  let avgGain = gains / period,
    avgLoss = losses / period;
  for (let i = period + 1; i < closes.length; i++) {
    const diff = closes[i] - closes[i - 1];
    if (diff > 0) {
      avgGain = (avgGain * (period - 1) + diff) / period;
      avgLoss = (avgLoss * (period - 1)) / period;
    } else {
      avgLoss = (avgLoss * (period - 1) - diff) / period;
      avgGain = (avgGain * (period - 1)) / period;
    }
  }
  if (avgLoss === 0) return 100;
  const rs = avgGain / avgLoss;
  return 100 - 100 / (1 + rs);
}

async function getTechnicalAnalysis(instId) {
  const candleData = await getHistoricalCandles(instId, "1D", 51);
  if (candleData.length < 51) return { error: "ÿ®ŸäÿßŸÜÿßÿ™ ÿßŸÑÿ¥ŸÖŸàÿπ ÿ∫Ÿäÿ± ŸÉÿßŸÅŸäÿ©." };
  const closes = candleData.map((c) => c.close);
  return {
    rsi: calculateRSI(closes),
    sma20: calculateSMA(closes, 20),
    sma50: calculateSMA(closes, 50),
  };
}

function calculatePerformanceStats(history) {
  if (history.length < 2) return null;
  const values = history.map((h) => h.total);
  const startValue = values[0];
  const endValue = values[values.length - 1];
  const pnl = endValue - startValue;
  const pnlPercent = startValue > 0 ? (pnl / startValue) * 100 : 0;

  const maxValue = Math.max(...values);
  const minValue = Math.min(...values);
  const avgValue = values.reduce((sum, val) => sum + val, 0) / values.length;

  const dailyReturns = [];
  for (let i = 1; i < values.length; i++) {
    dailyReturns.push((values[i] - values[i - 1]) / values[i - 1]);
  }
  const bestDayChange = Math.max(...dailyReturns) * 100;
  const worstDayChange = Math.min(...dailyReturns) * 100;
  const avgReturn =
    dailyReturns.reduce((sum, ret) => sum + ret, 0) / dailyReturns.length;

  const volatility =
    Math.sqrt(
      dailyReturns
        .map((x) => Math.pow(x - avgReturn, 2))
        .reduce((a, b) => a + b) / dailyReturns.length
    ) * 100;

  let volText = "ŸÖÿ™Ÿàÿ≥ÿ∑";
  if (volatility < 1) volText = "ŸÖŸÜÿÆŸÅÿ∂";
  if (volatility > 5) volText = "ŸÖÿ±ÿ™ŸÅÿπ";

  return {
    startValue,
    endValue,
    pnl,
    pnlPercent,
    maxValue,
    minValue,
    avgValue,
    bestDayChange,
    worstDayChange,
    volatility,
    volText,
  };
}

function createChartUrl(
  data,
  type = "line",
  title = "",
  labels = [],
  dataLabel = ""
) {
  if (!data || data.length === 0) return null;
  const pnl = data[data.length - 1] - data[0];
  const chartColor = pnl >= 0 ? "rgb(75, 192, 75)" : "rgb(255, 99, 132)";
  const chartBgColor = pnl >= 0 ? "rgba(75, 192, 75, 0.2)" : "rgba(255, 99, 132, 0.2)";
  const chartConfig = {
    type: "line",
    data: {
      labels: labels,
      datasets: [
        {
          label: dataLabel,
          data: data,
          fill: true,
          backgroundColor: chartBgColor,
          borderColor: chartColor,
          tension: 0.1,
        },
      ],
    },
    options: { title: { display: true, text: title } },
  };
  return `https://quickchart.io/chart?c=${encodeURIComponent(
    JSON.stringify(chartConfig)
  )}&backgroundColor=white`;
}

// =================================================================
// SECTION 3: FORMATTING AND MESSAGE FUNCTIONS
// =================================================================

function formatPrivateBuy(details) {
  const {
    asset,
    price,
    amountChange,
    tradeValue,
    oldTotalValue,
    newAssetWeight,
    newUsdtValue,
    newCashPercent,
  } = details;
  const tradeSizePercent =
    oldTotalValue > 0 ? (tradeValue / oldTotalValue) * 100 : 0;
  let msg =
    `*ŸÖÿ±ÿßŸÇÿ®ÿ© ÿßŸÑÿ£ÿµŸàŸÑ üî¨:*\n**ÿπŸÖŸÑŸäÿ© ÿßÿ≥ÿ™ÿ≠Ÿàÿßÿ∞ ÿ¨ÿØŸäÿØÿ© üü¢**\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n`;
  msg += `üî∏ **ÿßŸÑÿ£ÿµŸÑ ÿßŸÑŸÖÿ≥ÿ™ŸáÿØŸÅ:** \`${asset}/USDT\`\n`;
  msg += `üî∏ **ŸÜŸàÿπ ÿßŸÑÿπŸÖŸÑŸäÿ©:** ÿ™ÿπÿ≤Ÿäÿ≤ ŸÖÿ±ŸÉÿ≤ / ÿ®ŸÜÿßÿ° ŸÖÿ±ŸÉÿ≤ ÿ¨ÿØŸäÿØ\n`;
  msg += `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n*ÿ™ÿ≠ŸÑŸäŸÑ ÿßŸÑÿµŸÅŸÇÿ©:*\n`;
  msg += ` ‚ñ™Ô∏è **ÿ≥ÿπÿ± ÿßŸÑÿ™ŸÜŸÅŸäÿ∞:** \`$${formatNumber(price, 4)}\`\n`;
  msg += ` ‚ñ™Ô∏è **ÿßŸÑŸÉŸÖŸäÿ© ÿßŸÑŸÖÿ∂ÿßŸÅÿ©:** \`${formatNumber(Math.abs(amountChange), 6)}\`\n`;
  msg += ` ‚ñ™Ô∏è **ÿßŸÑÿ™ŸÉŸÑŸÅÿ© ÿßŸÑÿ•ÿ¨ŸÖÿßŸÑŸäÿ© ŸÑŸÑÿµŸÅŸÇÿ©:** \`$${formatNumber(tradeValue)}\`\n`;
  msg += `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n*ÿßŸÑÿ™ÿ£ÿ´Ÿäÿ± ÿπŸÑŸâ ŸáŸäŸÉŸÑ ÿßŸÑŸÖÿ≠ŸÅÿ∏ÿ©:*\n`;
  msg += ` ‚ñ™Ô∏è **ÿ≠ÿ¨ŸÖ ÿßŸÑÿµŸÅŸÇÿ© ŸÖŸÜ ÿ•ÿ¨ŸÖÿßŸÑŸä ÿßŸÑŸÖÿ≠ŸÅÿ∏ÿ©:** \`${formatNumber(tradeSizePercent)}%\`\n`;
  msg += ` ‚ñ™Ô∏è **ÿßŸÑŸàÿ≤ŸÜ ÿßŸÑÿ¨ÿØŸäÿØ ŸÑŸÑÿ£ÿµŸÑ:** \`${formatNumber(newAssetWeight)}%\`\n`;
  msg += ` ‚ñ™Ô∏è **ÿßŸÑÿ≥ŸäŸàŸÑÿ© ÿßŸÑŸÖÿ™ÿ®ŸÇŸäÿ© (USDT):** \`$${formatNumber(newUsdtValue)}\`\n`;
  msg += ` ‚ñ™Ô∏è **ŸÖÿ§ÿ¥ÿ± ÿßŸÑÿ≥ŸäŸàŸÑÿ© ÿßŸÑÿ≠ÿßŸÑŸä:** \`${formatNumber(newCashPercent)}%\`\n`;
  msg += `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n*ÿ®ÿ™ÿßÿ±ŸäÿÆ:* ${cairoTimeString()}`;
  return msg;
}

function formatPrivateSell(details) {
  const {
    asset,
    price,
    amountChange,
    tradeValue,
    oldTotalValue,
    newAssetWeight,
    newUsdtValue,
    newCashPercent,
  } = details;
  const tradeSizePercent =
    oldTotalValue > 0 ? (tradeValue / oldTotalValue) * 100 : 0;
  let msg =
    `*ŸÖÿ±ÿßŸÇÿ®ÿ© ÿßŸÑÿ£ÿµŸàŸÑ üî¨:*\n**ŸÖŸÜÿßŸàÿ±ÿ© ÿ™ŸÉÿ™ŸäŸÉŸäÿ© üü†**\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n`;
  msg += `üî∏ **ÿßŸÑÿ£ÿµŸÑ ÿßŸÑŸÖÿ≥ÿ™ŸáÿØŸÅ:** \`${asset}/USDT\`\n`;
  msg += `üî∏ **ŸÜŸàÿπ ÿßŸÑÿπŸÖŸÑŸäÿ©:** ÿ™ÿÆŸÅŸäŸÅ ÿßŸÑŸÖÿ±ŸÉÿ≤ / ÿ¨ŸÜŸä ÿ£ÿ±ÿ®ÿßÿ≠ ÿ¨ÿ≤ÿ¶Ÿä\n`;
  msg += `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n*ÿ™ÿ≠ŸÑŸäŸÑ ÿßŸÑÿµŸÅŸÇÿ©:*\n`;
  msg += ` ‚ñ™Ô∏è **ÿ≥ÿπÿ± ÿßŸÑÿ™ŸÜŸÅŸäÿ∞:** \`$${formatNumber(price, 4)}\`\n`;
  msg += ` ‚ñ™Ô∏è **ÿßŸÑŸÉŸÖŸäÿ© ÿßŸÑŸÖÿÆŸÅŸÅÿ©:** \`${formatNumber(Math.abs(amountChange), 6)}\`\n`;
  msg += ` ‚ñ™Ô∏è **ÿßŸÑÿπÿßÿ¶ÿØ ÿßŸÑÿ•ÿ¨ŸÖÿßŸÑŸä ŸÑŸÑÿµŸÅŸÇÿ©:** \`$${formatNumber(tradeValue)}\`\n`;
  msg += `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n*ÿßŸÑÿ™ÿ£ÿ´Ÿäÿ± ÿπŸÑŸâ ŸáŸäŸÉŸÑ ÿßŸÑŸÖÿ≠ŸÅÿ∏ÿ©:*\n`;
  msg += ` ‚ñ™Ô∏è **ÿ≠ÿ¨ŸÖ ÿßŸÑÿµŸÅŸÇÿ© ŸÖŸÜ ÿ•ÿ¨ŸÖÿßŸÑŸä ÿßŸÑŸÖÿ≠ŸÅÿ∏ÿ©:** \`${formatNumber(tradeSizePercent)}%\`\n`;
  msg += ` ‚ñ™Ô∏è **ÿßŸÑŸàÿ≤ŸÜ ÿßŸÑÿ¨ÿØŸäÿØ ŸÑŸÑÿ£ÿµŸÑ:** \`${formatNumber(newAssetWeight)}%\`\n`;
  msg += ` ‚ñ™Ô∏è **ÿßŸÑÿ≥ŸäŸàŸÑÿ© ÿßŸÑÿ¨ÿØŸäÿØÿ© (USDT):** \`$${formatNumber(newUsdtValue)}\`\n`;
  msg += ` ‚ñ™Ô∏è **ŸÖÿ§ÿ¥ÿ± ÿßŸÑÿ≥ŸäŸàŸÑÿ© ÿßŸÑÿ≠ÿßŸÑŸä:** \`${formatNumber(newCashPercent)}%\`\n`;
  msg += `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n*ÿ®ÿ™ÿßÿ±ŸäÿÆ:* ${cairoTimeString()}`;
  return msg;
}

function formatPrivateCloseReport(details) {
  const {
    asset,
    avgBuyPrice,
    avgSellPrice,
    pnl,
    pnlPercent,
    durationDays,
    highestPrice,
    lowestPrice,
  } = details;
  const pnlSign = pnl >= 0 ? "+" : "";
  const emoji = pnl >= 0 ? "üü¢" : "üî¥";
  let msg =
    `*ŸÖŸÑŸÅ ÿßŸÑŸÖŸáŸÖÿ© ÿßŸÑŸÖŸÉÿ™ŸÖŸÑÿ© üìÇ:*\n**ÿ™ŸÖ ÿ•ÿ∫ŸÑÿßŸÇ ŸÖÿ±ŸÉÿ≤ ${asset} ÿ®ŸÜÿ¨ÿßÿ≠ ‚úÖ**\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n`;
  msg += `*ÿßŸÑŸÜÿ™Ÿäÿ¨ÿ© ÿßŸÑŸÜŸáÿßÿ¶Ÿäÿ© ŸÑŸÑŸÖŸáŸÖÿ©:*\n`;
  msg += ` ‚ñ™Ô∏è **ÿßŸÑÿ≠ÿßŸÑÿ©:** **${pnl >= 0 ? "ŸÖÿ±ÿ®ÿ≠ÿ©" : "ÿÆÿßÿ≥ÿ±ÿ©"}**\n`;
  msg += ` ‚ñ™Ô∏è **ÿµÿßŸÅŸä ÿßŸÑÿ±ÿ®ÿ≠/ÿßŸÑÿÆÿ≥ÿßÿ±ÿ©:** \`${pnlSign}$${formatNumber(pnl)}\` ${emoji}\n`;
  msg += ` ‚ñ™Ô∏è **ŸÜÿ≥ÿ®ÿ© ÿßŸÑÿπÿßÿ¶ÿØ ÿπŸÑŸâ ÿßŸÑÿßÿ≥ÿ™ÿ´ŸÖÿßÿ± (ROI):** \`${pnlSign}${formatNumber(pnlPercent)}%\`\n`;
  msg += `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n*ÿßŸÑÿ¨ÿØŸàŸÑ ÿßŸÑÿ≤ŸÖŸÜŸä ŸàÿßŸÑÿ£ÿØÿßÿ°:*\n`;
  msg += ` ‚ñ™Ô∏è **ŸÖÿØÿ© ÿßŸÑÿßÿ≠ÿ™ŸÅÿßÿ∏ ÿ®ÿßŸÑŸÖÿ±ŸÉÿ≤:** \`${formatNumber(durationDays, 1)} ŸäŸàŸÖ\`\n`;
  msg += ` ‚ñ™Ô∏è **ŸÖÿ™Ÿàÿ≥ÿ∑ ÿ≥ÿπÿ± ÿßŸÑÿØÿÆŸàŸÑ:** \`$${formatNumber(avgBuyPrice, 4)}\`\n`;
  msg += ` ‚ñ™Ô∏è **ŸÖÿ™Ÿàÿ≥ÿ∑ ÿ≥ÿπÿ± ÿßŸÑÿÆÿ±Ÿàÿ¨:** \`$${formatNumber(avgSellPrice, 4)}\`\n`;
  msg += ` ‚ñ™Ô∏è **ÿ£ÿπŸÑŸâ ŸÇŸÖÿ© ÿ≥ÿπÿ±Ÿäÿ© ŸÖÿ≥ÿ¨ŸÑÿ©:** \`$${formatNumber(highestPrice, 4)}\`\n`;
  msg += ` ‚ñ™Ô∏è **ÿ£ÿØŸÜŸâ ŸÇÿßÿπ ÿ≥ÿπÿ±Ÿä ŸÖÿ≥ÿ¨ŸÑ:** \`$${formatNumber(lowestPrice, 4)}\`\n`;
  msg += `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n*ÿ®ÿ™ÿßÿ±ŸäÿÆ ÿßŸÑÿ•ÿ∫ŸÑÿßŸÇ:* ${cairoTimeString()}`;
  return msg;
}

function formatPublicBuy(details) {
  const { asset, price, oldTotalValue, tradeValue, oldUsdtValue, newCashPercent } =
    details;
  const tradeSizePercent =
    oldTotalValue > 0 ? (tradeValue / oldTotalValue) * 100 : 0;
  const cashConsumedPercent =
    oldUsdtValue > 0 ? (tradeValue / oldUsdtValue) * 100 : 0;
  let msg = `*üí° ÿ™ŸàÿµŸäÿ© ÿ¨ÿØŸäÿØÿ©: ÿ®ŸÜÿßÿ° ŸÖÿ±ŸÉÿ≤ ŸÅŸä ${asset} üü¢*\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n`;
  msg += `*ÿßŸÑÿ£ÿµŸÑ:* \`${asset}/USDT\`\n`;
  msg += `*ÿ≥ÿπÿ± ÿßŸÑÿØÿÆŸàŸÑ ÿßŸÑÿ≠ÿßŸÑŸä:* \`$${formatNumber(price, 4)}\`\n`;
  msg += `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n*ÿßÿ≥ÿ™ÿ±ÿßÿ™Ÿäÿ¨Ÿäÿ© ÿ•ÿØÿßÿ±ÿ© ÿßŸÑŸÖÿ≠ŸÅÿ∏ÿ©:*\n`;
  msg += ` ‚ñ™Ô∏è *ÿ≠ÿ¨ŸÖ ÿßŸÑÿØÿÆŸàŸÑ:* ÿ™ŸÖ ÿ™ÿÆÿµŸäÿµ \`${formatNumber(tradeSizePercent)}%\` ŸÖŸÜ ÿßŸÑŸÖÿ≠ŸÅÿ∏ÿ© ŸÑŸáÿ∞Ÿá ÿßŸÑÿµŸÅŸÇÿ©.\n`;
  msg += ` ‚ñ™Ô∏è *ÿßÿ≥ÿ™ŸáŸÑÿßŸÉ ÿßŸÑÿ≥ŸäŸàŸÑÿ©:* ÿßÿ≥ÿ™ŸáŸÑŸÉ Ÿáÿ∞ÿß ÿßŸÑÿØÿÆŸàŸÑ \`${formatNumber(cashConsumedPercent)}%\` ŸÖŸÜ ÿßŸÑÿ≥ŸäŸàŸÑÿ© ÿßŸÑŸÜŸÇÿØŸäÿ© ÿßŸÑŸÖÿ™ÿßÿ≠ÿ©.\n`;
  msg += ` ‚ñ™Ô∏è *ÿßŸÑÿ≥ŸäŸàŸÑÿ© ÿßŸÑŸÖÿ™ÿ®ŸÇŸäÿ©:* ÿ®ÿπÿØ ÿßŸÑÿµŸÅŸÇÿ©ÿå ÿ£ÿµÿ®ÿ≠ÿ™ ÿßŸÑÿ≥ŸäŸàŸÑÿ© ÿ™ÿ¥ŸÉŸÑ \`${formatNumber(newCashPercent)}%\` ŸÖŸÜ ÿßŸÑŸÖÿ≠ŸÅÿ∏ÿ©.\n`;
  msg += `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n*ŸÖŸÑÿßÿ≠ÿ∏ÿßÿ™:*\nŸÜÿ±Ÿâ ŸÅŸä Ÿáÿ∞Ÿá ÿßŸÑŸÖÿ≥ÿ™ŸàŸäÿßÿ™ ŸÅÿ±ÿµÿ© ŸàÿßÿπÿØÿ©. ÿßŸÑŸÖÿ±ÿßŸÇÿ®ÿ© ŸÖÿ≥ÿ™ŸÖÿ±ÿ©ÿå Ÿàÿ≥ŸÜŸàÿßŸÅŸäŸÉŸÖ ÿ®ÿ™ÿ≠ÿØŸäÿ´ÿßÿ™ ÿ•ÿØÿßÿ±ÿ© ÿßŸÑÿµŸÅŸÇÿ©.\n`;
  msg += `#ÿ™ŸàÿµŸäÿ© #${asset}`;
  return msg;
}

function formatPublicSell(details) {
  const { asset, price, amountChange, position } = details;
  const totalPositionAmountBeforeSale =
    position.totalAmountBought - (position.totalAmountSold - Math.abs(amountChange));
  const soldPercent =
    totalPositionAmountBeforeSale > 0
      ? (Math.abs(amountChange) / totalPositionAmountBeforeSale) * 100
      : 0;
  const partialPnl = price - position.avgBuyPrice;
  const partialPnlPercent =
    position.avgBuyPrice > 0 ? (partialPnl / position.avgBuyPrice) * 100 : 0;
  let msg = `*‚öôÔ∏è ÿ™ÿ≠ÿØŸäÿ´ ÿßŸÑÿ™ŸàÿµŸäÿ©: ÿ•ÿØÿßÿ±ÿ© ŸÖÿ±ŸÉÿ≤ ${asset} üü†*\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n`;
  msg += `*ÿßŸÑÿ£ÿµŸÑ:* \`${asset}/USDT\`\n`;
  msg += `*ÿ≥ÿπÿ± ÿßŸÑÿ®Ÿäÿπ ÿßŸÑÿ¨ÿ≤ÿ¶Ÿä:* \`$${formatNumber(price, 4)}\`\n`;
  msg += `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n*ÿßÿ≥ÿ™ÿ±ÿßÿ™Ÿäÿ¨Ÿäÿ© ÿ•ÿØÿßÿ±ÿ© ÿßŸÑŸÖÿ≠ŸÅÿ∏ÿ©:*\n`;
  msg += ` ‚ñ™Ô∏è *ÿßŸÑÿ•ÿ¨ÿ±ÿßÿ°:* ÿ™ŸÖ ÿ®Ÿäÿπ \`${formatNumber(soldPercent)}%\` ŸÖŸÜ ŸÖÿ±ŸÉÿ≤ŸÜÿß ŸÑÿ™ÿ£ŸÖŸäŸÜ ÿßŸÑÿ£ÿ±ÿ®ÿßÿ≠.\n`;
  msg += ` ‚ñ™Ô∏è *ÿßŸÑŸÜÿ™Ÿäÿ¨ÿ©:* ÿ±ÿ®ÿ≠ ŸÖÿ≠ŸÇŸÇ ÿπŸÑŸâ ÿßŸÑÿ¨ÿ≤ÿ° ÿßŸÑŸÖÿ®ÿßÿπ ÿ®ŸÜÿ≥ÿ®ÿ© \`${formatNumber(partialPnlPercent)}%\` üü¢.\n`;
  msg += ` ‚ñ™Ô∏è *ÿ≠ÿßŸÑÿ© ÿßŸÑŸÖÿ±ŸÉÿ≤:* ŸÑÿß Ÿäÿ≤ÿßŸÑ ÿßŸÑŸÖÿ±ŸÉÿ≤ ŸÖŸÅÿ™Ÿàÿ≠Ÿãÿß ÿ®ÿßŸÑŸÉŸÖŸäÿ© ÿßŸÑŸÖÿ™ÿ®ŸÇŸäÿ©.\n`;
  msg += `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n*ŸÖŸÑÿßÿ≠ÿ∏ÿßÿ™:*\nÿÆÿ∑Ÿàÿ© ÿßÿ≥ÿ™ÿ®ÿßŸÇŸäÿ© ŸÑÿ•ÿØÿßÿ±ÿ© ÿßŸÑŸÖÿÆÿßÿ∑ÿ± Ÿàÿ≠ŸÖÿßŸäÿ© ÿ±ÿ£ÿ≥ ÿßŸÑŸÖÿßŸÑ. ŸÜÿ≥ÿ™ŸÖÿ± ŸÅŸä ŸÖÿ™ÿßÿ®ÿπÿ© ÿßŸÑÿ£ŸáÿØÿßŸÅ ÿßŸÑÿ£ÿπŸÑŸâ.\n`;
  msg += `#ÿ•ÿØÿßÿ±ÿ©_ŸÖÿÆÿßÿ∑ÿ± #${asset}`;
  return msg;
}

function formatPublicClose(details) {
  const { asset, pnlPercent, durationDays, avgBuyPrice, avgSellPrice } = details;
  const pnlSign = pnlPercent >= 0 ? "+" : "";
  const emoji = pnlPercent >= 0 ? "üü¢" : "üî¥";
  let msg = `*üèÜ ÿßŸÑŸÜÿ™Ÿäÿ¨ÿ© ÿßŸÑŸÜŸáÿßÿ¶Ÿäÿ© ŸÑÿ™ŸàÿµŸäÿ© ${asset} ‚úÖ*\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n`;
  msg += `*ÿßŸÑÿ£ÿµŸÑ:* \`${asset}/USDT\`\n`;
  msg += `*ÿßŸÑÿ≠ÿßŸÑÿ©:* **ÿ™ŸÖ ÿ•ÿ∫ŸÑÿßŸÇ ÿßŸÑÿµŸÅŸÇÿ© ÿ®ÿßŸÑŸÉÿßŸÖŸÑ.**\n`;
  msg += `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n*ŸÖŸÑÿÆÿµ ÿ£ÿØÿßÿ° ÿßŸÑÿ™ŸàÿµŸäÿ©:*\n`;
  msg += ` ‚ñ™Ô∏è **ŸÖÿ™Ÿàÿ≥ÿ∑ ÿ≥ÿπÿ± ÿßŸÑÿØÿÆŸàŸÑ:** \`$${formatNumber(avgBuyPrice, 4)}\`\n`;
  msg += ` ‚ñ™Ô∏è **ŸÖÿ™Ÿàÿ≥ÿ∑ ÿ≥ÿπÿ± ÿßŸÑÿÆÿ±Ÿàÿ¨:** \`$${formatNumber(avgSellPrice, 4)}\`\n`;
  msg += ` ‚ñ™Ô∏è **ÿßŸÑÿπÿßÿ¶ÿØ ÿßŸÑŸÜŸáÿßÿ¶Ÿä ÿπŸÑŸâ ÿßŸÑÿßÿ≥ÿ™ÿ´ŸÖÿßÿ± (ROI):** \`${pnlSign}${formatNumber(pnlPercent)}%\` ${emoji}\n`;
  msg += ` ‚ñ™Ô∏è **ŸÖÿØÿ© ÿßŸÑÿ™ŸàÿµŸäÿ©:** \`${formatNumber(durationDays, 1)} ŸäŸàŸÖ\`\n`;
  msg += `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n*ÿßŸÑÿÆŸÑÿßÿµÿ©:*\n`;
  if (pnlPercent >= 0) {
    msg += `ÿµŸÅŸÇÿ© ŸÖŸàŸÅŸÇÿ© ÿ£ÿ´ÿ®ÿ™ÿ™ ÿ£ŸÜ ÿßŸÑÿµÿ®ÿ± ÿπŸÑŸâ ÿßŸÑÿ™ÿ≠ŸÑŸäŸÑ Ÿäÿ§ÿ™Ÿä ÿ´ŸÖÿßÿ±Ÿá.\n`;
  } else {
    msg += `ÿßŸÑÿÆÿ±Ÿàÿ¨ ÿ®ÿßŸÜÿ∂ÿ®ÿßÿ∑ ŸàŸÅŸÇŸãÿß ŸÑŸÑÿÆÿ∑ÿ© ŸáŸà ŸÜÿ¨ÿßÿ≠ ÿ®ÿ≠ÿØ ÿ∞ÿßÿ™Ÿá. ŸÜÿ≠ÿßŸÅÿ∏ ÿπŸÑŸâ ÿ±ÿ£ÿ≥ ÿßŸÑŸÖÿßŸÑ ŸÑŸÑŸÅÿ±ÿµÿ© ÿßŸÑŸÇÿßÿØŸÖÿ©.\n`;
  }
  msg += `\nŸÜÿ®ÿßÿ±ŸÉ ŸÑŸÖŸÜ ÿßÿ™ÿ®ÿπ ÿßŸÑÿ™ŸàÿµŸäÿ©. ŸÜÿ≥ÿ™ÿπÿØ ÿßŸÑÿ¢ŸÜ ŸÑŸÑÿ®ÿ≠ÿ´ ÿπŸÜ ÿßŸÑŸÅÿ±ÿµÿ© ÿßŸÑÿ™ÿßŸÑŸäÿ©.\n`;
  msg += `#ŸÜÿ™ÿßÿ¶ÿ¨ÿ™ŸàÿµŸäÿßÿ™ #${asset}`;
  return msg;
}

async function formatPortfolioMsg(assets, total, capital) {
  const positions = await loadPositions();
  const usdtAsset = assets.find((a) => a.asset === "USDT") || { value: 0 };
  const cashPercent = total > 0 ? (usdtAsset.value / total) * 100 : 0;
  const investedPercent = 100 - cashPercent;
  const pnl = capital > 0 ? total - capital : 0;
  const pnlPercent = capital > 0 ? (pnl / capital) * 100 : 0;
  const pnlSign = pnl >= 0 ? "+" : "";
  const pnlEmoji = pnl >= 0 ? "üü¢‚¨ÜÔ∏è" : "üî¥‚¨áÔ∏è";

  let dailyPnlText = " `ŸÑÿß ÿ™Ÿàÿ¨ÿØ ÿ®ŸäÿßŸÜÿßÿ™ ŸÉÿßŸÅŸäÿ©`";
  let totalValue24hAgo = 0;

  assets.forEach((asset) => {
    if (asset.asset === "USDT") totalValue24hAgo += asset.value;
    else if (asset.change24h !== undefined && asset.price > 0)
      totalValue24hAgo += asset.amount * (asset.price / (1 + asset.change24h));
    else totalValue24hAgo += asset.value;
  });

  if (totalValue24hAgo > 0) {
    const dailyPnl = total - totalValue24hAgo;
    const dailyPnlPercent = (dailyPnl / totalValue24hAgo) * 100;
    const dailySign = dailyPnl >= 0 ? "+" : "";
    const dailyEmoji = dailyPnl >= 0 ? "üü¢‚¨ÜÔ∏è" : "üî¥‚¨áÔ∏è";
    dailyPnlText = ` ${dailyEmoji} \`$${dailySign}${formatNumber(
      dailyPnl
    )}\` (\`${dailySign}${formatNumber(dailyPnlPercent)}%\`)`;
  }

  let caption = `üßæ *ÿßŸÑÿ™ŸÇÿ±Ÿäÿ± ÿßŸÑÿ™ÿ≠ŸÑŸäŸÑŸä ŸÑŸÑŸÖÿ≠ŸÅÿ∏ÿ©*\n\n`;
  caption += `*ÿ®ÿ™ÿßÿ±ŸäÿÆ: ${cairoTimeString()}*\n`;
  caption += `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n*ŸÜÿ∏ÿ±ÿ© ÿπÿßŸÖÿ© ÿπŸÑŸâ ÿßŸÑÿ£ÿØÿßÿ°:*\n`;
  caption += ` ‚ñ´Ô∏è *ÿßŸÑŸÇŸäŸÖÿ© ÿßŸÑÿ•ÿ¨ŸÖÿßŸÑŸäÿ©:* \`$${formatNumber(total)}\`\n`;
  if (capital > 0) caption += ` ‚ñ´Ô∏è *ÿ±ÿ£ÿ≥ ÿßŸÑŸÖÿßŸÑ:* \`$${formatNumber(capital)}\`\n`;
  caption += ` ‚ñ´Ô∏è *ÿ•ÿ¨ŸÖÿßŸÑŸä ÿßŸÑÿ±ÿ®ÿ≠ ÿ∫Ÿäÿ± ÿßŸÑŸÖÿ≠ŸÇŸÇ:* ${pnlEmoji} \`$${pnlSign}${formatNumber(
    pnl
  )}\` (\`${pnlSign}${formatNumber(pnlPercent)}%\`)\n`;
  caption += ` ‚ñ´Ô∏è *ÿßŸÑÿ£ÿØÿßÿ° ÿßŸÑŸäŸàŸÖŸä (24ÿ≥):*${dailyPnlText}\n`;
  caption += ` ‚ñ´Ô∏è *ÿßŸÑÿ≥ŸäŸàŸÑÿ©:* üíµ ŸÜŸÇÿØŸä ${formatNumber(
    cashPercent
  )}% / üìà ŸÖÿ≥ÿ™ÿ´ŸÖÿ± ${formatNumber(investedPercent)}%\n`;
  caption += `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n*ŸÖŸÉŸàŸÜÿßÿ™ ÿßŸÑŸÖÿ≠ŸÅÿ∏ÿ©:*\n`;

  const cryptoAssets = assets.filter((a) => a.asset !== "USDT");
  cryptoAssets.forEach((a, index) => {
    const percent = total > 0 ? (a.value / total) * 100 : 0;
    const position = positions[a.asset];
    caption += `\n‚ï≠‚îÄ *${a.asset}/USDT*\n`;
    caption += `‚îú‚îÄ *ÿßŸÑŸÇŸäŸÖÿ© ÿßŸÑÿ≠ÿßŸÑŸäÿ©:* \`$${formatNumber(a.value)}\` (*ÿßŸÑŸàÿ≤ŸÜ:* \`${formatNumber(
      percent
    )}%\`)\n`;
    if (position?.avgBuyPrice) {
      caption += `‚îú‚îÄ *ŸÖÿ™Ÿàÿ≥ÿ∑ ÿßŸÑÿ¥ÿ±ÿßÿ°:* \`$${formatNumber(position.avgBuyPrice, 4)}\`\n`;
    }
    caption += `‚îú‚îÄ *ÿ≥ÿπÿ± ÿßŸÑÿ≥ŸàŸÇ:* \`$${formatNumber(a.price, 4)}\`\n`;
    const dailyChangeEmoji = a.change24h >= 0 ? "üü¢‚¨ÜÔ∏è" : "üî¥‚¨áÔ∏è";
    caption += `‚îú‚îÄ *ÿßŸÑÿ£ÿØÿßÿ° ÿßŸÑŸäŸàŸÖŸä:* ${dailyChangeEmoji} \`${formatNumber(
      a.change24h * 100
    )}%\`\n`;
    if (position?.avgBuyPrice > 0) {
      const totalCost = position.avgBuyPrice * a.amount;
      const assetPnl = a.value - totalCost;
      const assetPnlPercent = totalCost > 0 ? (assetPnl / totalCost) * 100 : 0;
      const assetPnlEmoji = assetPnl >= 0 ? "üü¢" : "üî¥";
      const assetPnlSign = assetPnl >= 0 ? "+" : "";
      caption += `‚ï∞‚îÄ *ÿ±ÿ®ÿ≠/ÿÆÿ≥ÿßÿ±ÿ© ÿ∫Ÿäÿ± ŸÖÿ≠ŸÇŸÇ:* ${assetPnlEmoji} \`$${assetPnlSign}${formatNumber(
        assetPnl
      )}\` (\`${assetPnlSign}${formatNumber(assetPnlPercent)}%\`)`;
    } else {
      caption += `‚ï∞‚îÄ *ÿ±ÿ®ÿ≠/ÿÆÿ≥ÿßÿ±ÿ© ÿ∫Ÿäÿ± ŸÖÿ≠ŸÇŸÇ:* \`ÿ∫Ÿäÿ± ŸÖÿ≥ÿ¨ŸÑ\``;
    }

    if (index < cryptoAssets.length - 1) {
      caption += `\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ`;
    }
  });

  caption += `\n\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n*USDT (ÿßŸÑÿ±ÿµŸäÿØ ÿßŸÑŸÜŸÇÿØŸä)* üíµ\n`;
  caption += `*ÿßŸÑŸÇŸäŸÖÿ©:* \`$${formatNumber(usdtAsset.value)}\` (*ÿßŸÑŸàÿ≤ŸÜ:* \`${formatNumber(
    cashPercent
  )}%\`)`;
  return { caption };
}

async function formatAdvancedMarketAnalysis(ownedAssets = []) {
  const prices = await okxAdapter.getMarketPrices();
  if (!prices || prices.error) return `‚ùå ŸÅÿ¥ŸÑ ÿ¨ŸÑÿ® ÿ®ŸäÿßŸÜÿßÿ™ ÿßŸÑÿ≥ŸàŸÇ. ${prices.error || ""}`;
  const marketData = Object.entries(prices)
    .map(([instId, data]) => ({ instId, ...data }))
    .filter((d) => d.volCcy24h > 10000 && d.change24h !== undefined);

  marketData.sort((a, b) => b.change24h - a.change24h);
  const topGainers = marketData.slice(0, 5);
  const topLosers = marketData.slice(-5).reverse();

  marketData.sort((a, b) => b.volCcy24h - a.volCcy24h);
  const highVolume = marketData.slice(0, 5);

  const ownedSymbols = ownedAssets.map((a) => a.asset);
  let msg = `üöÄ *ÿ™ÿ≠ŸÑŸäŸÑ ÿßŸÑÿ≥ŸàŸÇ ÿßŸÑŸÖÿ™ŸÇÿØŸÖ (OKX)* | ${new Date().toLocaleDateString("ar-EG")}\n`;
  msg += `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n`;

  const avgGainerChange =
    topGainers.length > 0
      ? topGainers.reduce((sum, g) => sum + g.change24h, 0) / topGainers.length
      : 0;
  const avgLoserChange =
    topLosers.length > 0
      ? topLosers.reduce((sum, l) => sum + Math.abs(l.change24h), 0) / topLosers.length
      : 0;

  let sentimentText = "ŸÖÿ≠ÿßŸäÿØÿ© üòê\n(ŸáŸÜÿßŸÉ ŸÅÿ±ÿµ ŸÑŸÑŸÜŸÖŸà ŸÑŸÉŸÜ ÿßŸÑÿ™ŸÇŸÑÿ®ÿßÿ™ ÿπÿßŸÑŸäÿ©)";
  if (avgGainerChange > avgLoserChange * 1.5) {
    sentimentText = "ÿµÿπŸàÿØŸä üü¢\n(ŸÖÿπŸÜŸàŸäÿßÿ™ ÿßŸÑÿ≥ŸàŸÇ ÿ•Ÿäÿ¨ÿßÿ®Ÿäÿ©ÿå ŸàÿßŸÑÿ±ÿßÿ®ÿ≠ŸàŸÜ Ÿäÿ™ŸÅŸàŸÇŸàŸÜ)";
  } else if (avgLoserChange > avgGainerChange * 1.5) {
    sentimentText = "Ÿáÿ®Ÿàÿ∑Ÿä üî¥\n(ŸÖÿπŸÜŸàŸäÿßÿ™ ÿßŸÑÿ≥ŸàŸÇ ÿ≥ŸÑÿ®Ÿäÿ©ÿå ŸàÿßŸÑÿÆÿßÿ≥ÿ±ŸàŸÜ Ÿäÿ≥Ÿäÿ∑ÿ±ŸàŸÜ)";
  }

  msg += `üìä *ŸÖÿπŸÜŸàŸäÿßÿ™ ÿßŸÑÿ≥ŸàŸÇ:* ${sentimentText}\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n`;
  msg +=
    "üìà *ÿ£ŸÉÿ®ÿ± ÿßŸÑÿ±ÿßÿ®ÿ≠ŸäŸÜ (24ÿ≥):*\n" +
    topGainers
      .map((c) => {
        const symbol = c.instId.split("-")[0];
        const ownedMark = ownedSymbols.includes(symbol) ? " ‚úÖ" : "";
        return ` - \`${c.instId}\`: \`+${formatNumber(c.change24h * 100)}%\`${ownedMark}`;
      })
      .join("\n") +
    "\n\n";
  msg +=
    "üìâ *ÿ£ŸÉÿ®ÿ± ÿßŸÑÿÆÿßÿ≥ÿ±ŸäŸÜ (24ÿ≥):*\n" +
    topLosers
      .map((c) => {
        const symbol = c.instId.split("-")[0];
        const ownedMark = ownedSymbols.includes(symbol) ? " ‚úÖ" : "";
        return ` - \`${c.instId}\`: \`${formatNumber(c.change24h * 100)}%\`${ownedMark}`;
      })
      .join("\n") +
    "\n\n";
  msg +=
    "üìä *ÿßŸÑÿ£ÿπŸÑŸâ ŸÅŸä ÿ≠ÿ¨ŸÖ ÿßŸÑÿ™ÿØÿßŸàŸÑ:*\n" +
    highVolume
      .map((c) => ` - \`${c.instId}\`: \`${(c.volCcy24h / 1e6).toFixed(2)}M\` USDT`)
      .join("\n") +
    "\n\n";

  let smartRecommendation =
    "üí° *ÿ™ŸàÿµŸäÿ©:* ÿ±ÿßŸÇÿ® ÿßŸÑÿ£ÿµŸàŸÑ ÿ∞ÿßÿ™ ÿ≠ÿ¨ŸÖ ÿßŸÑÿ™ÿØÿßŸàŸÑ ÿßŸÑŸÖÿ±ÿ™ŸÅÿπÿå ŸÅŸáŸä ÿ∫ÿßŸÑÿ®Ÿãÿß ŸÖÿß ÿ™ŸÇŸàÿØ ÿßÿ™ÿ¨ÿßŸá ÿßŸÑÿ≥ŸàŸÇ.";
  const ownedGainers = topGainers.filter((g) => ownedSymbols.includes(g.instId.split("-")[0]));
  const ownedLosers = topLosers.filter((l) => ownedSymbols.includes(l.instId.split("-")[0]));
  if (ownedGainers.length > 0) {
    smartRecommendation = `üí° *ÿ™ŸàÿµŸäÿ© ÿ∞ŸÉŸäÿ©:* ÿπŸÖŸÑÿ© *${
      ownedGainers[0].instId.split("-")[0]
    }* ÿßŸÑÿ™Ÿä ÿ™ŸÖŸÑŸÉŸáÿß ÿ∂ŸÖŸÜ ÿ£ŸÉÿ®ÿ± ÿßŸÑÿ±ÿßÿ®ÿ≠ŸäŸÜ. ŸÇÿØ ÿ™ŸÉŸàŸÜ ŸÅÿ±ÿµÿ© ÿ¨ŸäÿØÿ© ŸÑÿ™ŸÇŸäŸäŸÖ ÿßŸÑŸÖÿ±ŸÉÿ≤.`;
  } else if (ownedLosers.length > 0) {
    smartRecommendation = `üí° *ÿ™ŸàÿµŸäÿ© ÿ∞ŸÉŸäÿ©:* ÿπŸÖŸÑÿ© *${
      ownedLosers[0].instId.split("-")[0]
    }* ÿßŸÑÿ™Ÿä ÿ™ŸÖŸÑŸÉŸáÿß ÿ∂ŸÖŸÜ ÿ£ŸÉÿ®ÿ± ÿßŸÑÿÆÿßÿ≥ÿ±ŸäŸÜ. ŸÇÿØ Ÿäÿ™ÿ∑ŸÑÿ® ÿßŸÑÿ£ŸÖÿ± ŸÖÿ±ÿßÿ¨ÿπÿ© ŸàŸÇŸÅ ÿßŸÑÿÆÿ≥ÿßÿ±ÿ© ÿ£Ÿà ÿßÿ≥ÿ™ÿ±ÿßÿ™Ÿäÿ¨Ÿäÿ™ŸÉ.`;
  }

  msg += `${smartRecommendation}`;
  return msg;
}

async function formatQuickStats(assets, total, capital) {
  const pnl = capital > 0 ? total - capital : 0;
  const pnlPercent = capital > 0 ? (pnl / capital) * 100 : 0;
  const statusEmoji = pnl >= 0 ? "üü¢" : "üî¥";
  const statusText = pnl >= 0 ? "ÿ±ÿ®ÿ≠" : "ÿÆÿ≥ÿßÿ±ÿ©";

  let msg = "‚ö° *ÿ•ÿ≠ÿµÿßÿ¶Ÿäÿßÿ™ ÿ≥ÿ±Ÿäÿπÿ©*\n\n";
  msg += `üíé *ÿ•ÿ¨ŸÖÿßŸÑŸä ÿßŸÑÿ£ÿµŸàŸÑ:* \`${assets.filter((a) => a.asset !== "USDT").length}\`\n`;
  msg += `üí∞ *ÿßŸÑŸÇŸäŸÖÿ© ÿßŸÑÿ≠ÿßŸÑŸäÿ©:* \`$${formatNumber(total)}\`\n`;
  if (capital > 0) {
    msg += `üìà *ŸÜÿ≥ÿ®ÿ© ÿßŸÑÿ±ÿ®ÿ≠/ÿßŸÑÿÆÿ≥ÿßÿ±ÿ©:* \`${formatNumber(pnlPercent)}%\`\n`;
    msg += `üéØ *ÿßŸÑÿ≠ÿßŸÑÿ©:* ${statusEmoji} ${statusText}\n`;
  }

  msg += `\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n*ÿ™ÿ≠ŸÑŸäŸÑ ÿßŸÑŸÇŸÖŸÖ ŸàÿßŸÑŸÇŸäÿπÿßŸÜ ŸÑŸÑÿ£ÿµŸàŸÑ:*\n`;
  const cryptoAssets = assets.filter((a) => a.asset !== "USDT");
  if (cryptoAssets.length === 0) {
    msg += "\n`ŸÑÿß ÿ™Ÿàÿ¨ÿØ ÿ£ÿµŸàŸÑ ŸÅŸä ŸÖÿ≠ŸÅÿ∏ÿ™ŸÉ ŸÑÿ™ÿ≠ŸÑŸäŸÑŸáÿß.`";
  } else {
    const assetExtremesPromises = cryptoAssets.map((asset) =>
      getAssetPriceExtremes(`${asset.asset}-USDT`)
    );
    const assetExtremesResults = await Promise.all(assetExtremesPromises);
    cryptoAssets.forEach((asset, index) => {
      const extremes = assetExtremesResults[index];
      msg += `\nüî∏ *${asset.asset}:*\n`;
      if (extremes) {
        msg += ` *ÿßŸÑÿ£ÿ≥ÿ®ŸàÿπŸä:* ŸÇŸÖÿ© \`$${formatNumber(extremes.weekly.high, 4)}\` / ŸÇÿßÿπ \`$${formatNumber(
          extremes.weekly.low,
          4
        )}\`\n`;
        msg += ` *ÿßŸÑÿ¥Ÿáÿ±Ÿä:* ŸÇŸÖÿ© \`$${formatNumber(extremes.monthly.high, 4)}\` / ŸÇÿßÿπ \`$${formatNumber(
          extremes.monthly.low,
          4
        )}\`\n`;
        msg += ` *ÿßŸÑÿ≥ŸÜŸàŸä:* ŸÇŸÖÿ© \`$${formatNumber(extremes.yearly.high, 4)}\` / ŸÇÿßÿπ \`$${formatNumber(
          extremes.yearly.low,
          4
        )}\`\n`;
        msg += ` *ÿßŸÑÿ™ÿßÿ±ŸäÿÆŸä:* ŸÇŸÖÿ© \`$${formatNumber(extremes.allTime.high, 4)}\` / ŸÇÿßÿπ \`$${formatNumber(
          extremes.allTime.low,
          4
        )}\``;
      } else {
        msg += ` \`ÿ™ÿπÿ∞ÿ± ÿ¨ŸÑÿ® ÿßŸÑÿ®ŸäÿßŸÜÿßÿ™ ÿßŸÑÿ™ÿßÿ±ŸäÿÆŸäÿ©.\``;
      }
    });
  }

  msg += `\n\n‚è∞ *ÿ¢ÿÆÿ± ÿ™ÿ≠ÿØŸäÿ´:* ${cairoTimeString()}`;
  return msg;
}

async function formatPerformanceReport(period, periodLabel, history, btcHistory) {
  const stats = calculatePerformanceStats(history);
  if (!stats) return { error: "‚ÑπÔ∏è ŸÑÿß ÿ™Ÿàÿ¨ÿØ ÿ®ŸäÿßŸÜÿßÿ™ ŸÉÿßŸÅŸäÿ© ŸÑŸáÿ∞Ÿá ÿßŸÑŸÅÿ™ÿ±ÿ©." };

  let btcPerformanceText = " `ŸÑÿß ÿ™ÿ™ŸàŸÅÿ± ÿ®ŸäÿßŸÜÿßÿ™`";
  let benchmarkComparison = "";
  if (btcHistory && btcHistory.length >= 2) {
    const btcStart = btcHistory[0].close;
    const btcEnd = btcHistory[btcHistory.length - 1].close;
    const btcChange = ((btcEnd - btcStart) / btcStart) * 100;
    btcPerformanceText = `\`${btcChange >= 0 ? "+" : ""}${formatNumber(btcChange)}%\``;
    if (stats.pnlPercent > btcChange) {
      benchmarkComparison = `‚ñ™Ô∏è *ÿßŸÑŸÜÿ™Ÿäÿ¨ÿ©:* ÿ£ÿØÿßÿ° ÿ£ÿπŸÑŸâ ŸÖŸÜ ÿßŸÑÿ≥ŸàŸÇ ‚úÖ`;
    } else {
      benchmarkComparison = `‚ñ™Ô∏è *ÿßŸÑŸÜÿ™Ÿäÿ¨ÿ©:* ÿ£ÿØÿßÿ° ÿ£ŸÇŸÑ ŸÖŸÜ ÿßŸÑÿ≥ŸàŸÇ ‚ö†Ô∏è`;
    }
  }

  const chartLabels = history.map((h) =>
    period === "24h"
      ? new Date(h.time).getHours() + ":00"
      : new Date(h.time).toLocaleDateString("en-GB", { day: "2-digit", month: "2-digit" })
  );
  const chartDataPoints = history.map((h) => h.total);
  const chartUrl = createChartUrl(
    chartDataPoints,
    "line",
    `ÿ£ÿØÿßÿ° ÿßŸÑŸÖÿ≠ŸÅÿ∏ÿ© - ${periodLabel}`,
    chartLabels,
    "ŸÇŸäŸÖÿ© ÿßŸÑŸÖÿ≠ŸÅÿ∏ÿ© ($)"
  );

  const pnlSign = stats.pnl >= 0 ? "+" : "";
  const emoji = stats.pnl >= 0 ? "üü¢‚¨ÜÔ∏è" : "üî¥‚¨áÔ∏è";

  let caption = `üìä *ÿ™ÿ≠ŸÑŸäŸÑ ÿ£ÿØÿßÿ° ÿßŸÑŸÖÿ≠ŸÅÿ∏ÿ© | ${periodLabel}*\n\n`;
  caption += `üìà *ÿßŸÑŸÜÿ™Ÿäÿ¨ÿ©:* ${emoji} \`$${pnlSign}${formatNumber(stats.pnl)}\` (\`${pnlSign}${formatNumber(
    stats.pnlPercent
  )}%\`)\n`;
  caption += `*ÿßŸÑÿ™ÿ∫Ÿäÿ± ÿßŸÑÿµÿßŸÅŸä: ŸÖŸÜ \`$${formatNumber(stats.startValue)}\` ÿ•ŸÑŸâ \`$${formatNumber(
    stats.endValue
  )}\`*\n\n`;
  caption += `*üìù ŸÖŸÇÿßÿ±ŸÜÿ© ŸÖÿπŸäÿßÿ±Ÿäÿ© (Benchmark):*\n`;
  caption += `‚ñ™Ô∏è *ÿ£ÿØÿßÿ° ŸÖÿ≠ŸÅÿ∏ÿ™ŸÉ:* \`${stats.pnlPercent >= 0 ? "+" : ""}${formatNumber(
    stats.pnlPercent
  )}%\`\n`;
  caption += `‚ñ™Ô∏è *ÿ£ÿØÿßÿ° ÿπŸÖŸÑÿ© BTC:* ${btcPerformanceText}\n`;
  caption += `${benchmarkComparison}\n\n`;
  caption += `*üìà ŸÖÿ§ÿ¥ÿ±ÿßÿ™ ÿßŸÑÿ£ÿØÿßÿ° ÿßŸÑÿ±ÿ¶Ÿäÿ≥Ÿäÿ©:*\n`;
  caption += `‚ñ™Ô∏è *ÿ£ŸÅÿ∂ŸÑ ŸäŸàŸÖ:* \`+${formatNumber(stats.bestDayChange)}%\`\n`;
  caption += `‚ñ™Ô∏è *ÿ£ÿ≥Ÿàÿ£ ŸäŸàŸÖ:* \`${formatNumber(stats.worstDayChange)}%\`\n`;
  caption += `‚ñ™Ô∏è *ŸÖÿ≥ÿ™ŸàŸâ ÿßŸÑÿ™ŸÇŸÑÿ®:* ${stats.volText}`;

  return { caption, chartUrl };
}

// =================================================================
// SECTION 4: BACKGROUND JOBS & DYNAMIC MANAGEMENT
// =================================================================

async function updatePositionAndAnalyze(asset, amountChange, price, newTotalAmount, oldTotalValue) {
  if (!asset || price === undefined || price === null || isNaN(price))
    return { analysisResult: null };

  const positions = await loadPositions();
  let position = positions[asset];
  let analysisResult = { type: "none", data: {} };

  if (amountChange > 0) {
    const tradeValue = amountChange * price;
    const entryCapitalPercent = oldTotalValue > 0 ? (tradeValue / oldTotalValue) * 100 : 0;

    if (!position) {
      positions[asset] = {
        totalAmountBought: amountChange,
        totalCost: tradeValue,
        avgBuyPrice: price,
        openDate: new Date().toISOString(),
        totalAmountSold: 0,
        realizedValue: 0,
        highestPrice: price,
        lowestPrice: price,
        entryCapitalPercent: entryCapitalPercent,
        risk: { pnlAlerts: {} },
        alerts: {},
      };
    } else {
      position.totalAmountBought += amountChange;
      position.totalCost += tradeValue;
      position.avgBuyPrice = position.totalCost / position.totalAmountBought;
    }
    analysisResult.type = "buy";
  } else if (amountChange < 0 && position) {
    const soldAmount = Math.abs(amountChange);
    position.realizedValue = (position.realizedValue || 0) + soldAmount * price;
    position.totalAmountSold = (position.totalAmountSold || 0) + soldAmount;

    if (newTotalAmount * price < 1) {
      const totalCost = parseFloat(position.totalCost);
      const realizedValue = parseFloat(position.realizedValue);
      const finalPnl = realizedValue - totalCost;
      const finalPnlPercent = totalCost > 0 ? (finalPnl / totalCost) * 100 : 0;

      const closeDate = new Date();
      const openDate = new Date(position.openDate);
      const durationDays = (closeDate.getTime() - openDate.getTime()) / (1000 * 60 * 60 * 24);

      const avgSellPrice =
        position.totalAmountSold > 0 ? position.realizedValue / position.totalAmountSold : 0;

      const closeReportData = {
        asset,
        pnl: finalPnl,
        pnlPercent: finalPnlPercent,
        durationDays,
        avgBuyPrice: position.avgBuyPrice,
        avgSellPrice,
        highestPrice: position.highestPrice,
        lowestPrice: position.lowestPrice,
        entryCapitalPercent: position.entryCapitalPercent,
        exitQuantityPercent: 100,
      };
      await saveClosedTrade(closeReportData);
      analysisResult = { type: "close", data: closeReportData };
      delete positions[asset];
    } else {
      analysisResult.type = "sell";
    }
  }

  await savePositions(positions);
  analysisResult.data.position = positions[asset] || position;
  return { analysisResult };
}

async function monitorBalanceChanges() {
  try {
    await sendDebugMessage("Checking balance changes...");
    const previousState = await loadBalanceState();
    const previousBalances = previousState.balances || {};
    const oldTotalValue = previousState.totalValue || 0;
    const oldUsdtValue = previousBalances["USDT"] || 0;

    const currentBalance = await okxAdapter.getBalanceForComparison();
    if (!currentBalance) {
      await sendDebugMessage("Could not fetch current balance.");
      return;
    }

    const prices = await okxAdapter.getMarketPrices();
    if (!prices || prices.error) {
      await sendDebugMessage("Could not fetch market prices.");
      return;
    }

    const { assets: newAssets, total: newTotalValue, usdtValue: newUsdtValue, error } =
      await okxAdapter.getPortfolio(prices);
    if (error || newTotalValue === undefined) {
      await sendDebugMessage(`Portfolio fetch error: ${error}`);
      return;
    }

    if (Object.keys(previousBalances).length === 0) {
      await sendDebugMessage("Initializing first balance state.");
      await saveBalanceState({ balances: currentBalance, totalValue: newTotalValue });
      return;
    }

    const allAssets = new Set([...Object.keys(previousBalances), ...Object.keys(currentBalance)]);
    let stateNeedsUpdate = false;

    for (const asset of allAssets) {
      if (asset === "USDT") continue;

      const prevAmount = previousBalances[asset] || 0;
      const currAmount = currentBalance[asset] || 0;
      const difference = currAmount - prevAmount;

      const priceData = prices[`${asset}-USDT`];
      if (
        !priceData ||
        !priceData.price ||
        isNaN(priceData.price) ||
        Math.abs(difference * priceData.price) < 1
      )
        continue;

      await sendDebugMessage(`Detected change for ${asset}: ${difference}`);
      stateNeedsUpdate = true;

      const { analysisResult } = await updatePositionAndAnalyze(
        asset,
        difference,
        priceData.price,
        currAmount,
        oldTotalValue
      );

      if (analysisResult.type === "none") continue;

      const tradeValue = Math.abs(difference) * priceData.price;
      const newAssetData = newAssets.find((a) => a.asset === asset);
      const newAssetValue = newAssetData ? newAssetData.value : 0;
      const newAssetWeight = newTotalValue > 0 ? (newAssetValue / newTotalValue) * 100 : 0;
      const newCashPercent = newTotalValue > 0 ? (newUsdtValue / newTotalValue) * 100 : 0;

      const baseDetails = {
        asset,
        price: priceData.price,
        amountChange: difference,
        tradeValue,
        oldTotalValue,
        newAssetWeight,
        newUsdtValue,
        newCashPercent,
        oldUsdtValue,
        position: analysisResult.data.position,
      };

      const settings = await loadSettings();
      let privateMessage, publicMessage;

      if (analysisResult.type === "buy") {
        privateMessage = formatPrivateBuy(baseDetails);
        publicMessage = formatPublicBuy(baseDetails);
        await bot.api.sendMessage(AUTHORIZED_USER_ID, privateMessage, { parse_mode: "Markdown" });
        if (settings.autoPostToChannel) {
          await bot.api.sendMessage(process.env.TARGET_CHANNEL_ID, publicMessage, {
            parse_mode: "Markdown",
          });
        }
      } else if (analysisResult.type === "sell") {
        privateMessage = formatPrivateSell(baseDetails);
        publicMessage = formatPublicSell(baseDetails);
        await bot.api.sendMessage(AUTHORIZED_USER_ID, privateMessage, { parse_mode: "Markdown" });
        if (settings.autoPostToChannel) {
          await bot.api.sendMessage(process.env.TARGET_CHANNEL_ID, publicMessage, {
            parse_mode: "Markdown",
          });
        }
      } else if (analysisResult.type === "close") {
        privateMessage = formatPrivateCloseReport(analysisResult.data);
        publicMessage = formatPublicClose(analysisResult.data);

        if (settings.autoPostToChannel) {
          await bot.api.sendMessage(process.env.TARGET_CHANNEL_ID, publicMessage, {
            parse_mode: "Markdown",
          });
          await bot.api.sendMessage(AUTHORIZED_USER_ID, privateMessage, { parse_mode: "Markdown" });
        } else {
          const confirmationKeyboard = new InlineKeyboard()
            .text("‚úÖ ŸÜÿπŸÖÿå ÿßŸÜÿ¥ÿ± ÿßŸÑÿ™ŸÇÿ±Ÿäÿ±", "publish_report")
            .text("‚ùå ŸÑÿßÿå ÿ™ÿ¨ÿßŸáŸÑ", "ignore_report");
          const hiddenMarker = `\n${JSON.stringify(publicMessage)}`;
          const confirmationMessage =
            `*ÿ™ŸÖ ÿ•ÿ∫ŸÑÿßŸÇ ÿßŸÑŸÖÿ±ŸÉÿ≤ ÿ®ŸÜÿ¨ÿßÿ≠. ŸáŸÑ ÿ™ŸàÿØ ŸÜÿ¥ÿ± ÿßŸÑŸÖŸÑÿÆÿµ ŸÅŸä ÿßŸÑŸÇŸÜÿßÿ©ÿü*\n\n` +
            `${privateMessage}${hiddenMarker}`;
          await bot.api.sendMessage(AUTHORIZED_USER_ID, confirmationMessage, {
            parse_mode: "Markdown",
            reply_markup: confirmationKeyboard,
          });
        }
      }
    }

    if (stateNeedsUpdate) {
      await saveBalanceState({ balances: currentBalance, totalValue: newTotalValue });
      await sendDebugMessage("State updated after balance change.");
    } else {
      await sendDebugMessage("No significant balance changes detected.");
    }
  } catch (e) {
    console.error("CRITICAL ERROR in monitorBalanceChanges:", e);
    await sendDebugMessage(`CRITICAL ERROR in monitorBalanceChanges: ${e.message}`);
  }
}

async function trackPositionHighLow() {
  try {
    const positions = await loadPositions();
    if (Object.keys(positions).length === 0) return;

    const prices = await okxAdapter.getMarketPrices();
    if (!prices || prices.error) return;

    let positionsUpdated = false;

    for (const symbol in positions) {
      const position = positions[symbol];
      const currentPrice = prices[`${symbol}-USDT`]?.price;
      if (!currentPrice) continue;

      if (!position.highestPrice || currentPrice > position.highestPrice) {
        position.highestPrice = currentPrice;
        positionsUpdated = true;
      }
      if (!position.lowestPrice || currentPrice < position.lowestPrice) {
        position.lowestPrice = currentPrice;
        positionsUpdated = true;
      }

      // ÿ™ÿ£ŸÖŸäŸÜ ŸáŸäÿßŸÉŸÑ ÿßŸÑÿ™ŸÜÿ®ŸäŸáÿßÿ™
      position.risk = position.risk || {};
      position.risk.pnlAlerts = position.risk.pnlAlerts || {};
      position.alerts = position.alerts || {};
    }

    if (positionsUpdated) {
      await savePositions(positions);
      await sendDebugMessage("Updated position high/low prices.");
    }
  } catch (e) {
    console.error("CRITICAL ERROR in trackPositionHighLow:", e);
  }
}

async function checkPriceAlerts() {
  try {
    const alerts = await loadAlerts();
    if (alerts.length === 0) return;

    const prices = await okxAdapter.getMarketPrices();
    if (!prices || prices.error) return;

    const remainingAlerts = [];
    let triggered = false;

    for (const alert of alerts) {
      const currentPrice = prices[alert.instId]?.price;
      if (currentPrice === undefined) {
        remainingAlerts.push(alert);
        continue;
      }
      if (
        (alert.condition === ">" && currentPrice > alert.price) ||
        (alert.condition === "<" && currentPrice < alert.price)
      ) {
        await bot.api.sendMessage(
          AUTHORIZED_USER_ID,
          `üö® *ÿ™ŸÜÿ®ŸäŸá ÿ≥ÿπÿ±!* \`${alert.instId}\`\nÿßŸÑÿ¥ÿ±ÿ∑: ${alert.condition} ${alert.price}\nÿßŸÑÿ≥ÿπÿ± ÿßŸÑÿ≠ÿßŸÑŸä: \`${currentPrice}\``,
          { parse_mode: "Markdown" }
        );
        triggered = true;
      } else {
        remainingAlerts.push(alert);
      }
    }

    if (triggered) await saveAlerts(remainingAlerts);
  } catch (error) {
    console.error("Error in checkPriceAlerts:", error);
  }
}

// ÿØÿßŸÑÿ© ŸÖÿ≥ÿßÿπÿØÿ© ŸÑÿ•ÿ±ÿ≥ÿßŸÑ ÿ™ŸÜÿ®ŸäŸá PnL ŸÖÿπ ÿßÿ≠ÿ™ÿ±ÿßŸÖ ÿßŸÑŸÖŸáŸÑÿ© Ÿàÿ≠ÿØ ÿßŸÑŸÇŸäŸÖÿ©
async function maybeSendPnlAlert({
  symbol,
  currentPrice,
  position,
  assetValue,
  assetWeightPercent,
  isProfit,
  pnlAbs,
  pnlPct,
  alertSettings,
}) {
  try {
    // ÿßŸÑÿ≠ÿØ ÿßŸÑÿ£ÿØŸÜŸâ ŸÑŸÇŸäŸÖÿ© ÿßŸÑÿ£ÿµŸÑ
    if (assetValue < (alertSettings.minAssetValueForAlerts || 50)) return false;

    const cooldownMinutes =
      (position.alerts && position.alerts.cooldownMinutes) ||
      alertSettings.cooldownMinutes ||
      15;

    const now = Date.now();
    const last = position.alerts?.lastAlertAt || 0;
    if (last && minutesDiff(last, now) < cooldownMinutes) return false;

    position.alerts = position.alerts || {};
    position.alerts.lastAlertAt = now;

    const sign = isProfit ? "+" : "";
    const emoji = isProfit ? "üü¢" : "üî¥";

    const msg =
      `üîî *ÿ™ŸÜÿ®ŸäŸá ${isProfit ? "ÿ±ÿ®ÿ≠" : "ÿÆÿ≥ÿßÿ±ÿ©"} ÿ∫Ÿäÿ± ŸÖÿ≠ŸÇŸÇ*\n` +
      `*ÿßŸÑÿ£ÿµŸÑ:* \`${symbol}/USDT\`\n` +
      `‚ñ™Ô∏è *ÿßŸÑŸÇŸäŸÖÿ© ÿßŸÑÿ≠ÿßŸÑŸäÿ©:* \`$${formatNumber(assetValue)}\` (*ÿßŸÑŸàÿ≤ŸÜ:* \`${formatNumber(
        assetWeightPercent
      )}%\`)\n` +
      `‚ñ™Ô∏è *ÿßŸÑŸÖÿ™Ÿàÿ≥ÿ∑:* \`$${formatNumber(position.avgBuyPrice, 4)}\` | *ÿßŸÑÿ≥ÿπÿ± ÿßŸÑÿ≠ÿßŸÑŸä:* \`$${formatNumber(
        currentPrice,
        4
      )}\`\n` +
      `‚ñ™Ô∏è *ÿ∫Ÿäÿ± ŸÖÿ≠ŸÇŸÇ:* ${emoji} \`${sign}$${formatNumber(pnlAbs)}\` (\`${sign}${formatNumber(
        pnlPct
      )}%\`)\n` +
      `\n‚è∞ *ÿ¢ÿÆÿ± ÿ™ÿ≠ÿØŸäÿ´:* ${cairoTimeString()}`;

    await bot.api.sendMessage(AUTHORIZED_USER_ID, msg, { parse_mode: "Markdown" });
    return true;
  } catch (e) {
    console.error("Error sending PnL alert:", e);
    return false;
  }
}

// ÿ™ÿπÿØŸäŸÑ checkPriceMovements: Ÿäÿ±ÿ≥ŸÑ ÿ™ŸÜÿ®ŸäŸáÿßÿ™ ÿßŸÑÿ≠ÿ±ŸÉÿ© ÿßŸÑÿ™ŸÇŸÑŸäÿØŸäÿ© + ÿ™ŸÜÿ®ŸäŸáÿßÿ™ PnL ŸÖÿπ Cooldown
async function checkPriceMovements() {
  try {
    await sendDebugMessage("Checking price movements...");
    const alertSettings = await loadAlertSettings();
    const priceTracker = await loadPriceTracker();
    const prices = await okxAdapter.getMarketPrices();
    if (!prices || prices.error) return;

    const portfolio = await okxAdapter.getPortfolio(prices);
    const { assets, total: currentTotalValue, error } = portfolio;
    if (error || currentTotalValue === undefined) return;

    const positions = await loadPositions();

    if (priceTracker.totalPortfolioValue === 0) {
      priceTracker.totalPortfolioValue = currentTotalValue;
      assets.forEach((a) => {
        if (a.price) priceTracker.assets[a.asset] = a.price;
      });
      await savePriceTracker(priceTracker);
      return;
    }

    let trackerUpdated = false;

    const assetValueMap = {};
    assets.forEach((a) => (assetValueMap[a.asset] = a.value || 0));

    for (const asset of assets) {
      if (asset.asset === "USDT" || !asset.price) continue;

      // ÿ™ŸÜÿ®ŸäŸá ÿßŸÑÿ≠ÿ±ŸÉÿ© ÿßŸÑÿ™ŸÇŸÑŸäÿØŸä
      const lastPrice = priceTracker.assets[asset.asset];
      if (lastPrice) {
        const changePercent = ((asset.price - lastPrice) / lastPrice) * 100;
        const movementThreshold =
          alertSettings.overrides[asset.asset] || alertSettings.global;

        if (Math.abs(changePercent) >= movementThreshold) {
          const movementText = changePercent > 0 ? "ÿµÿπŸàÿØ" : "Ÿáÿ®Ÿàÿ∑";
          const message =
            `üìà *ÿ™ŸÜÿ®ŸäŸá ÿ≠ÿ±ŸÉÿ© ÿ≥ÿπÿ± ŸÑÿ£ÿµŸÑ!* \`${asset.asset}\`\n` +
            `*ÿßŸÑÿ≠ÿ±ŸÉÿ©:* ${movementText} ÿ®ŸÜÿ≥ÿ®ÿ© \`${formatNumber(changePercent)}%\`\n` +
            `*ÿßŸÑÿ≥ÿπÿ± ÿßŸÑÿ≠ÿßŸÑŸä:* \`$${formatNumber(asset.price, 4)}\``;
          await bot.api.sendMessage(AUTHORIZED_USER_ID, message, {
            parse_mode: "Markdown",
          });
          priceTracker.assets[asset.asset] = asset.price;
          trackerUpdated = true;
        }
      } else {
        priceTracker.assets[asset.asset] = asset.price;
        trackerUpdated = true;
      }

      // ÿ™ŸÜÿ®ŸäŸá PnL ŸÑŸÉŸÑ ŸÖÿ±ŸÉÿ≤
      const symbol = asset.asset;
      const position = positions[symbol];
      if (!position || !position.avgBuyPrice || position.avgBuyPrice <= 0) continue;

      position.risk = position.risk || {};
      position.risk.pnlAlerts = position.risk.pnlAlerts || {};
      position.alerts = position.alerts || {};

      const avgBuy = parseFloat(position.avgBuyPrice) || 0;
      const qty =
        parseFloat(position.totalAmountBought || 0) - parseFloat(position.totalAmountSold || 0);
      if (qty <= 0) continue;

      const currentValue = asset.price * qty;
      const cost = avgBuy * qty;
